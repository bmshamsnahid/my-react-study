[{"type":"folder","name":"01 Styled Components","children":[{"type":"file","name":"01 Intro","children":null,"path":"../..//01 Styled Components/01 Intro.md","content":"## Styled Components\n\n`Styled Components` is another cool library, we can use to style any HTML elements and reuse anywhere in our react application. There is a whole [motivation](https://styled-components.com/docs/basics#motivation) section, why this library is a really good approach to use CSS in the JSX.\n\n### Comparing With Other CSS-in-JS Library\n---\n\nThe purpose of `styled-component` is not meant to avoid using any other `UI Framework` like material-ui or semantic-ui. `UI Frameworks` are there to resolve the modular problem like creating a modal or expansion panel. With only CSS we can not crete a modal, we need to make use of the JavaScript. On the other hand, the `styled-components` are there to write CSS in modern Javascript.\n\nA closer competitor of the `styled-component` can be [emotion.js](https://github.com/emotion-js/emotion) or [aphrodite](https://github.com/Khan/aphrodite). \n\nBoth the `styled-component` and the `emotion` has pretty much similar syntax but `styled-component` got a better performance.\n\nOn the other hand, the `aphrodite` got faster performance but in this case, we have to write CSS in the JSS format. This could be a trade-off of using the `styled-component` over the `aphrodite`.\n\n### Couple of Advantages\n---\n\n* By default, the styled components css styles is scoped to the local css class. Although we can override the limitations by using the [createGlobalStyle](https://styled-components.com/docs/api#createglobalstyle).\n* Increase code readability by providing scripted names. Instead of using `HTML DOM`, in JSX we can explicitly named the component.\n* It reduce the amount of code loaded in each page. If we use a button with styled component and that button is not loaded in a page, these CSS related to the button will not be loaded.\n* Since the `styled-components` provide the unique names for each class, it ensures, the class name does not conflict with the global CSS or other library.\n* My most favorite feature is, we can use our JavaScript skills to dynamically do the property binding in the CSS.\n* Like other library, it also provide the theming support.\n\n### Implementations\n---\n\nLet's actually implement these and seeing the advantages in firsthand instead of reading some words.\n\n### Some Best Practices\n\n---\n\n- For nested css styles, should use `css` helper, provided by `styled-components` library\n- End of the day, these are styled component, we should use define them outside of the component and name should start with Upper case letter.\n- Theming and global CSS should go to a directory that provides the theming support."},{"type":"file","name":"02 Getting Started","children":null,"path":"../..//01 Styled Components/02 Getting Started.md","content":"## Getting Started\n\n### Project Setup\n---\n\nCreate a react app using CRA,\n\n```bash\nnpx create-react-app styled-components\n```\n\nA react project will be created with named `styled-components`.\n\nNow delete every files and folders in the `src` directory and create two files, named `index.js` and `App.js`;\n\nWe will do our experiments in the `App.js` file. Our initial `App.js` file and `index.js` file will be following,\n\n**index.js**\n\n```js\nimport React from 'react';\nimport ReactDom from 'react-dom';\n\nimport App from './App';\n\nconst root = document.getElementById('root');\n\nReactDom.render(<App />, root);\n```\n\n**App.js**\n\n```js\nimport React from 'react';\n\nconst App = () => <div>Yo!!</div>\nexport default App;\n```\n\n### Module Installation\n\n---\n\nNow install the `styled-components` from [npm](https://www.npmjs.com/package/styled-components) registry,\n\n```js\nyarn add styled-components\n```\n\n### First Styled Component\n\n--- \n\nSince we already installed the `styled-components` module in the project, lets import it in the `App.js`.\n\nAfter importing, the `App.js` file will be,\n\n```js\nimport React from 'react';\nimport styled from 'styled-components';\n\nconst App = () => <div>Yo!!</div>\nexport default App;\n```\n\nFirst we crete a styled title component,\n\n```js\nconst Title = styled.h1`\n  color: red;\n  font-size: 5rem;\n`;\n```\n\nWe can use this `Title` styled component in the `App.js` like,\n\n```jsx\nconst App = () => <Title>Yo!!<Title/>;\n```\n\nWe can notice the style changes in the browser.\n\nLet's create another section styled component and use it as wrapper of `Title` component.\n\nOur `Section` component can be,\n\n```jsx\nconst Section = styled.section`\n  border: 2rem solid green;\n`;\n```\n\nWe can use this `Section` styled component as following,\n\n```jsx\nconst App = () => <Section><Title>YO!!</Title></Section>;\n```\n\nOur final code with `Title` and `Section` styled component should look like the following,\n\n```jsx\nimport React from 'react';\nimport styled from 'styled-components'\n\nconst Title = styled.h1`\n  color: red;\n  font-size: 5rem;\n`;\n\nconst Section = styled.section`\n  border: 2rem solid green;\n`;\n\nconst App = () => <Section><Title>YO!!</Title></Section>;\n\nexport default App;\n```\n\n### Summary\n---\n\nThe nice things about the styled components is, it provided a scripted names. when we look at the component, we can see this is a `Title` component. We do not dig down to the `div` and then a `h1` tag.\n\n\nIn a nutshell this is what a styled components brief overview. "},{"type":"file","name":"03 Passing Props","children":null,"path":"../..//01 Styled Components/03 Passing Props.md","content":"## Passing Props\n\nLets consider a scenario, when we can have a re-useable button component. It could be\n\n* Default type with black color text\n* Primary type with green color text\n\nIn this case we have to pass the props to the styled component and determine the text color according to the props.\n\nFirst, create a re-usable button component,\n\n```jsx\nimport React from 'react';\nimport styled from 'styled-components';\n\nconst StyledButton = styled.button`\n  color: ${({ primary }) => (primary ? 'green' : 'black')};\n`;\n\nconst Button = ({ primary, children }) => <StyledButton primary={primary}>\n  {children}\n</StyledButton>\n```\n\nHere, in the `StyledButton`, we receive the props primary and rendering the color accordingly.\n\nWe can test the button component from parent component by,\n\n```jsx\nimport React from 'react';\n// import Button if it is in different file or folder\n\nconst App = () => <>\n  <Button primary>Primary Button</Button>\n  <Button>Default Button</Button>\n</>;\n```\n\nIn the browser, there should be two button, one primary with green color and another button with default black color.\n\nA complete code should look like the followings,\n\n```jsx\nimport React from 'react';\nimport styled from 'styled-components'\n\n\nconst StyledButton = styled.button`\n  color: ${({ primary }) => (primary ? 'green' : 'black')};\n`;\n\nconst Button = ({ primary, children }) => <StyledButton primary={primary}>\n  {children}\n</StyledButton>\n\nconst App = () => <>\n  <Button primary>Primary Button</Button>\n  <Button>Default Button</Button>\n</>;\n\nexport default App;\n```"},{"type":"file","name":"04 Nested CSS Implementation","children":null,"path":"../..//01 Styled Components/04 Nested CSS Implementation.md","content":"## Nested CSS Implementation\n\nThere is a helper method in styled components named [css](https://styled-components.com/docs/api#css). This can be used to render nested css in the styled component.\n\nLet's consider a scenario where we have a re-usable button component. If the button is primary, the background color will be green and text color will be white.\n\nIn this case, we can take two approaches,\n\n**First Approach (Not Ideal)**\n\n```jsx\nimport React from 'react';\nimport styled from 'styled-components';\n\nconst StyledButton = styled.button`\n  color: ${({ primary }) => (primary && 'white')};\n  background-color: ${({ primary }) => (primary && 'green')};\n`;\n\nconst Button = ({ primary, children }) => <StyledButton primary={primary}>\n  {children}\n</StyledButton>\n```\n\nYou might notice, we have to use two method in the template literals for the same condition. We can make use of the `css` helper method in this case.\n\n**Second Approach (Ideal One)**\n\n```jsx\nimport React from 'react';\nimport styled, { css } from 'styled-components';\n\nconst StyledButton = styled.button`\n  ${({ primary }) => (primary && css`\n    color: white;\n    background-color: green;\n  `)};\n`;\n\nconst Button = ({ primary, children }) => <StyledButton primary={primary}>\n  {children}\n</StyledButton>\n```\n\nOur final code should be followings,\n\n```jsx\nimport React from 'react';\nimport styled, { css } from 'styled-components'\n\nconst StyledButton = styled.button`\n  ${({ primary }) => (primary && css`\n    color: white;\n    background-color: green;\n  `)};\n`;\n\nconst Button = ({ primary, children }) => <StyledButton primary={primary}>\n  {children}\n</StyledButton>\n\nconst App = () => <>\n  <Button primary>Primary Button</Button>\n  <Button>Default Button</Button>\n</>;\n\nexport default App;\n```\n\nIn browser, we should see two buttons, one primary button, white text with green background and another should be the default button."},{"type":"file","name":"05 Extending Styles","children":null,"path":"../..//01 Styled Components/05 Extending Styles.md","content":"## Extending Styles\n\nIn our project, almost always we use 3rd party UI library, like material-ui, semantic-ui, bootstrap etc. These library already have styled component. We often use theses stock design and sometimes have to tweak a little bit.\n\nFor example, let's consider we already have a button that is properly styled. This button can come from some 3rd party library or our custom designed library. Now we will extend this already styled button component.\n\n\nFirst assume, we already have a styled button,\n\n```jsx\nimport styled from 'styled-components';\n\nconst ExistingStyledButton = styled.button`\n  color: white;\n  background-color: green;\n`;\n```\n\nThis `ExistingStyledButton` can be a button comes from the semantic ui or the material ui. In this button, we want to add the border in the button and we will call it `MyButton`.\n\n```jsx\nimport styled from 'styled-components';\n\nconst ExistingStyledButton = styled.button`\n  color: white;\n  background-color: green;\n`;\n\nconst MyButton = styled(ExistingStyledButton)`\n  border: 1rem solid red;\n`;\n```\n\nHere, the we pass the existing button to the styled component and add the additional css.\n\nOur final code can be as followings,\n\n```jsx\nimport React from 'react';\nimport styled from 'styled-components';\n\nconst ExistingStyledButton = styled.button`\n  color: white;\n  background-color: green;\n`;\n\nconst MyButton = styled(ExistingStyledButton)`\n  border: 1rem solid red;\n`;\n\nconst Button = ({ children }) => <MyButton>{children}</MyButton>\n\nconst App = () => <Button>My Over Ride Styled Button</Button>\n\nexport default App;\n```\n\nIn browser, we should see a button with red border.\n"},{"type":"file","name":"06 Reuseable Styled Components","children":null,"path":"../..//01 Styled Components/06 Reuseable Styled Components.md","content":"## Reuseable Styled Components\n\nWe might want to use re-useable styled component. For example, we want to have a certain margin in couple of components. Since after all, `styled-components` are component, we can create a wrapper component and use it where necessary.\n\nLet's create a reusable wrapper component,\n\n```jsx\nimport styled from 'styled-components';\n\nconst Wrapper = styled.span`\n  border: 1rem solid red;\n`;\n```\n\nNow we can use this `Wrapper` in multiple component,\n\n```jsx\nimport React from 'react';\nimport styled from 'styled-components';\n\nconst Wrapper = styled.span`\n  border: 1rem solid red;\n`;\n\nconst App = () => <>\n  <Wrapper>\n    Hello\n  </Wrapper>\n  <Wrapper>\n    <button>Click Me</button>\n  </Wrapper>\n</>\n\nexport default App;\n```\n\nIn browser, we should see a text and a button with red border, that is coming from the wrapper component.\n"},{"type":"file","name":"07 Hover Effects","children":null,"path":"../..//01 Styled Components/07 Hover Effects.md","content":"## Hover Effects\n\nWe can adjust css for hover effect. Let's consider a button, on hover, it turns green.\n\n```jsx\nimport styled from 'styled-components';\n\nconst StyledButton = styled.button`\n  &:hover: {\n    background-color: green;\n  }\n`;\n```\n\nIf we use the `StyledButton` as followings, \n\n```jsx\nimport React from 'react';\nimport styled from 'styled-components';\n\nconst StyledButton = styled.button`\n  &:hover {\n    background-color: green;\n  }\n`;\n\nconst Button = ({ children }) => <StyledButton>{children}</StyledButton>\n\nconst App = () => <Button>Get Hover Effect</Button>;\n\nexport default App;\n```\n\nIn browser, we should see a button with hover effect."},{"type":"file","name":"08 Using Class","children":null,"path":"../..//01 Styled Components/08 Using Class.md","content":"## Using Class\n\nWe can use classes inside the styled component styled component. This class will be scoped inside the styled component.\n\nLet's crate a styled component with a class,\n\n```jsx\nimport styled from 'styled-components';\n\nconst StyledButton = styled.button`\n  & .greenText {\n    color: green;\n  }\n`;\n```\n\nWe can use this `StyledButton` as followings,\n\n```jsx\nimport React from 'react';\nimport styled from 'styled-components';\n\nconst StyledButton = styled.button`\n  & .greenText {\n    color: green;\n  }\n`;\n\nconst Button = ({ children }) => <StyledButton>\n  {children}\n  <p className=\"greenText\">Green Text Class Implementation</p>\n</StyledButton>;\n\nconst App = () => <Button>Hello</Button>;\n\nexport default App;\n```\n\nWe should see a green color text inside the button."},{"type":"file","name":"09 Keyframes For Animations","children":null,"path":"../..//01 Styled Components/09 Keyframes For Animations.md","content":"## Key Frames For Animations\n\nTo create animations, the `styled-components` provide a helper method [keyframes](https://styled-components.com/docs/api#keyframes).\n\nLet's create a `fade-in` animations using the `keyframes`,\n\n```jsx\nimport { keyframes } from 'styled-components';\n\nconst fadeIn = keyframes`\n  0% {\n    opacity: 0;\n  }\n\n  100% {\n    opacity: 1;\n  }\n`;\n```\n\nTraditionally, we should put the `fadeIn` animation functionalities in a reusable directory.\n\nWe can use this `fadeIn` animation in a div as followings,\n\n```jsx\nimport React from 'react';\nimport styled, { keyframes } from 'styled-components';\n\nconst fadeIn = keyframes`\n  0% {\n    opacity: 0;\n  }\n\n  100% {\n    opacity: 1;\n  }\n`;\n\nconst AnimatedDiv = styled.div`\n  animation: 2s ${fadeIn} ease-in;\n`;\n\nconst App = () => <AnimatedDiv>Welcome to Fade in Animation</AnimatedDiv>\n\nexport default App;\n```\n\nIn browser, if we reload the page, we should notice the fade in animations."},{"type":"file","name":"10 Animations On Effect","children":null,"path":"../..//01 Styled Components/10 Animations On Effect.md","content":"## Animations Effect\n\nThere could be a requirement to show animations on some css effect. Here we will show the fade  animations in the hover effect.\n\nThe `FadeIn` effect,\n\n```jsx\nimport { keyframes } from 'styled-components';\n\nconst FadeIn = keyframes`\n  0% {\n    opacity: 0;\n  }\n\n  100% {\n    opacity: 1;\n  }\n`;\n```\n\nA styled component, and it's wrapper;\n\n```jsx\nimport styled from 'styled-components';\n\nconst StyledDiv = styled.div`\n  background-color: green;\n`;\n\nconst WrapperComponent = styled.div`\n  &:hover ${StyledDiv} {\n    background-color: red;\n    animation: 2s ${FadeIn} ease-in;\n  }\n`;\n```\n\nOur final codebase should look like the followings,\n\n```jsx\nimport React from 'react';\nimport styled, { keyframes } from 'styled-components';\n\nconst FadeIn = keyframes`\n  0% {\n    opacity: 0;\n  }\n\n  100% {\n    opacity: 1;\n  }\n`;\n\nconst StyledDiv = styled.div`\n  background-color: green;\n`;\n\nconst WrapperComponent = styled.div`\n  &:hover ${StyledDiv} {\n    background-color: red;\n    animation: 2s ${FadeIn} ease-in;\n  }\n`;\n\nconst App = () => <WrapperComponent>\n  <StyledDiv>Hello</StyledDiv>\n</WrapperComponent>\n\nexport default App;\n```\n\nIn browser, we should see the hover effect with animation."},{"type":"file","name":"11 Overriding Attributes","children":null,"path":"../..//01 Styled Components/11 Overriding Attributes.md","content":"## Passing Attributes\n\nUsing `styled-components` we can override attributes to the styled component using the [attrs](https://styled-components.com/docs/basics#overriding-attrs) method.\n\nBy default then anchor tag does not open a URL in a new tab. With an attribute `target` with value `_blank`, it open the URL in a new tab. Let's create a styled component withe the `_blank` as a `target` value,\n\n```jsx\nconst styled from 'styled-components';\n\nconst StyledLink = styled.a.attrs(() => ({ target: '_blank' }))`\n  color: green;\n`;\n```\n\nWe can use this `StyledLink` as the followings,\n\n```jsx\nimport React from 'react';\nconst styled from 'styled-components';\n\nconst StyledLink = styled.a.attrs(() => ({ target: '_blank' }))`\n  color: green;\n`;\n\nconst App = () => <StyledLink href='https://www.google.com'>Google</StyledLink>\n\nexport default App;\n```\n\nIn browser, if we click the link, it should open in the new tab."},{"type":"file","name":"12 Global Styles","children":null,"path":"../..//01 Styled Components/12 Global Styles.md","content":"## Global Styles\n\nTo provide global styles we can make use of [createGlobalStyle](https://styled-components.com/docs/api#createglobalstyle).\n\nHere, we first create a global styles and inject the styles to the `index.js` file in the react app.\n\nLet's create a global styles,\n\n```jsx\nimport { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyle = createGlobalStyle`\n  html {\n    border: 1rem solid red;\n  }\n`;\n```\n\nAlthough we can inject the styles any place, `index.js` is the ideal place to inject the global styles. We should also consider placing the global styles file in the theming directory.\n\nNow we should inject the `GlobalStyle` in the `index.js`,\n\n```jsx\nimport React from 'react';\nimport ReactDom from 'react-dom';\nimport { createGlobalStyle } from 'styled-components';\n\nimport App from './App';\n\nconst GlobalStyle = createGlobalStyle`\n  html {\n    border: 1rem solid red;\n  }\n`;\n\nconst root = document.getElementById('root');\n\nReactDom.render(<>\n  <GlobalStyle />\n  <App />\n</>, root);\n```\n\nWith this setup, if we go to browser and reload the application, we should see the red border."},{"type":"file","name":"13 Theming","children":null,"path":"../..//01 Styled Components/13 Theming.md","content":"## Theming\n\nWe can use theme with styled components. When we inject a theme using [theme provider](https://styled-components.com/docs/api#themeprovider) to a styled component, it will be available to all our styled components.\n\nLet's define a theme,\n\n```js\nconst theme = {\n  colors: {\n    primary: 'green',\n    danger: 'red'\n  }\n};\n```\n\nUsing theme provider, now we will inject the theme in the `index.js` as,\n\n```jsx\nimport React from 'react';\nimport ReactDom from 'react-dom';\nimport { ThemeProvider } from 'styled-components';\n\nimport App from './App';\n\nconst theme = {\n  colors: {\n    primary: 'green',\n    danger: 'red'\n  }\n};\n\nconst root = document.getElementById('root');\n\nReactDom.render(<ThemeProvider theme={theme}><App /></ThemeProvider>, root);\n```\n\nNow we can make use of the themes in the `App` component as followings,\n\n```jsx\nimport React from 'react';\nimport styled from 'styled-components';\n\nconst StyledDiv = styled.div`\n  color: ${({ theme }) => theme.colors.primary}\n`;\n\nconst App = () => <StyledDiv>Color From Theme</StyledDiv>;\n\nexport default App;\n```\n\nIn browser, we should see text of green color, that is coming from the theme.\n\n"}],"path":"../..//01 Styled Components","content":""}]